#!/usr/bin/env python3
"""
Run Simple Prototype Pollution Exploit using LogicPWN Exploit Engine
"""

from pathlib import Path

import requests

from logicpwn.core.exploit_engine.exploit_engine import (
    load_exploit_chain_from_file,
    run_exploit_chain,
)


def main():
    """Load and execute the simple prototype pollution YAML exploit"""

    print("🚀 LogicPWN Simple Prototype Pollution Exploit")
    print("=" * 60)

    # Path to our simple YAML exploit
    yaml_file = Path(__file__).parent / "simple_exploit_corrected.yaml"

    if not yaml_file.exists():
        print(f"❌ Error: YAML file not found: {yaml_file}")
        return

    try:
        # Load the exploit chain from YAML
        print(f"📋 Loading exploit chain from: {yaml_file}")
        chain = load_exploit_chain_from_file(str(yaml_file))

        print(f"✅ Loaded exploit chain: {chain.name}")
        print(f"📝 Description: {chain.description}")
        print(f"🔗 Total steps: {len(chain.steps)}")
        print()

        # Create HTTP session
        session = requests.Session()

        # Execute the exploit chain
        print("🎯 Executing exploit chain...")
        results = run_exploit_chain(session, chain)

        # Process results
        print("\n" + "=" * 60)
        print("📊 EXPLOIT CHAIN RESULTS")
        print("=" * 60)

        successful_steps = 0
        total_steps = len(results)

        for i, result in enumerate(results, 1):
            print(f"\n📋 Step {i}: {result.step_name}")

            if result.status.value == "success":
                print("   ✅ Status: SUCCESS")
                successful_steps += 1

                # Show response details
                if result.response:
                    print(f"   🌐 Status Code: {result.response.status_code}")
                    if hasattr(result.response, "text") and result.response.text:
                        response_preview = result.response.text[:200].replace("\n", " ")
                        print(f"   📄 Response Preview: {response_preview}...")

                # Show validation results
                if result.validation_result:
                    if result.validation_result.matched_indicators:
                        print(
                            f"   ✅ Matched Indicators: {result.validation_result.matched_indicators}"
                        )

            else:
                print("   ❌ Status: FAILED")
                if result.error_message:
                    print(f"   💥 Error: {result.error_message}")

            print(f"   ⏱️  Execution Time: {result.execution_time:.2f}s")

        # Summary
        print("\n" + "=" * 60)
        print("📈 EXPLOIT SUMMARY")
        print(f"   Total steps: {total_steps}")
        print(f"   Successful: {successful_steps}")
        print(f"   Failed: {total_steps - successful_steps}")
        print(f"   Success Rate: {(successful_steps / total_steps) * 100:.1f}%")

        if successful_steps == total_steps:
            print("   🎉 FULL EXPLOIT SUCCESS!")
        elif successful_steps > 0:
            print("   🟡 PARTIAL SUCCESS")
        else:
            print("   🔴 EXPLOIT FAILED")

    except FileNotFoundError as e:
        print(f"❌ Error: {e}")
    except Exception as e:
        print(f"❌ Unexpected error: {e}")


if __name__ == "__main__":
    main()
